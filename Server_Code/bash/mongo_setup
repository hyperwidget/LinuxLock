
// FIND PROPER DB //

show dbs 
use linux_lock 
db.dropDatabase() // Drops all tables in linux lock

 // RECREATE COLLECTIONS //
db.createCollection("rfids")
db.createCollection("zones")
db.createCollection("cardHolders")
db.createCollection("devices")
db.createCollection("events")
db.createCollection("settings")
db.createCollection("admins")


// CREATE ID's for every cardHolder  (need to create before anything else so that RFID's can use, in real situation in rfids cardholder_id can be null//
cardHolder1_id = ObjectId()
cardHolder2_id = ObjectId()
cardHolder3_id = ObjectId()


//-----------------------DEVICES--------------------------------------//
//device
//{ _id: id,
//name : name, 
//type : type
//zone_id : zone_id // CANNOT Create zone_id before zone which references back device?
//}
// CREATE DEVICE's  ID's //

device1_id = ObjectId()
device2_id = ObjectId()
device3_id = ObjectId()



// CREATE DEVICES //
device1 = { _id: device1_id, name : "Lock1 Main", type : 12 }
device2 = { _id: device2_id, name :  "Lock2 Secondary", type : 13 }
device3 = { _id: device3_id, name :  "Lock3 Secondary", type : 14 }

// INSERT Devices TO DB //
db.devices.insert(device1)
db.devices.insert(device2)
db.devices.insert(device3)


//----------------------ZONES (need to create Devices first)---------------//

//zone
//{ _id: id,
//name: name,
//devices: [{device_id: device_id}]
//}.


// CREATE ZONE's  ID's //

zone1_id = ObjectId()
zone2_id = ObjectId()

// CREATE ZONES //
// Why is `devices` an object? It should just be [ObjectId], to make
// querying simpler.
zone1 = { _id: zone1_id, name : "Main Office", devices: [{device_id: device2_id}] } // TIME LIMIT
zone2 = { _id: zone2_id, name :  "Private Office", devices: [{device_id: device3_id}] } // TIME LIMIT

// INSERT ZONES TO DB //
db.zones.insert(zone1)
db.zones.insert(zone2)


//------------------RFID---------------------//

// CREATE RFID's  ID's //

rfid1_id = ObjectId()
rfid2_id = ObjectId()
rfid3_id = ObjectId()
rfid4_id = ObjectId()
rfid5_id = ObjectId()

//Create RDIF's //
rfid1 = { _id : rfid1_id,  rfidNo : "0200D17485", status: "a", cardHolder_id: cardHolder1_id }
rfid2 = { _id : rfid2_id,  rfidNo : "0200D14D3E", status: "a", cardHolder_id: cardHolder2_id }
rfid3 = { _id : rfid3_id,  rfidNo : "0200D15473", status: "n", cardHolder_id: cardHolder3_id }
rfid4 = { _id : rfid4_id,  rfidNo : "0200D2881A", status: "n", cardHolder_id: cardHolder1_id }
rfid5 = { _id : rfid5_id,  rfidNo : "0200D1423F", status: "n", cardHolder_id: cardHolder2_id }

// INSERT RFIDs TO DB //
db.rfids.insert(rfid1)
db.rfids.insert(rfid2)
db.rfids.insert(rfid3)
db.rfids.insert(rfid4)
db.rfids.insert(rfid5)

// --------------------CARDHOLDER---------------//


//cardHolder
//{_id: id, 
//first: first,
//last: last,
//email: email,
//phone: phone,
//userRole: role,
//cards: [{rfid_id: rfid_id}]
//zones: [{zone_id: zone_id}]
//}


// CREATE CardHolder OBJECTS//


cardHolder1 = {_id: cardHolder1_id , first: "Anatolijs", last: "Spektors", email: "anatolijs.spektors@senecacollege.ca", phone: "222 222 222", userRole: "su", cards:[{rfid_id: rfid2_id}], zones:[{zone_id: zone2_id}] }

cardHolder2 = { _id: cardHolder2_id , first: "Hunter", last: "Jansen", email: "hunter.jansen@senecacollege.ca", phone: "647 231 333", userRole: "su", cards:[{rfid_id: rfid2_id}], zones:[{zone_id: zone2_id}] }

cardHolder3 = { _id : cardHolder3_id , first: "Alex", last: "D'Amico", email: "alex.damico@senecacollege.ca", phone: "416 543 986", userRole: "su", cards:[{rfid_id: rfid1_id}], zones:[{zone_id: zone1_id}] }

// INSERT USERS TO DB //
db.cardHolders.insert(cardHolder1)
db.cardHolders.insert(cardHolder2)
db.cardHolders.insert(cardHolder3)


// ------------------Events------------------------- //

//event   // HOW ABOUT USER WHO ENTERED? OR RFID ?
//{ _id: id,
//device_id: {type:ObjectId, ref:"Device"},
//rfid_id: {type:ObjectId, ref:"RFID"},
//alias: {type:WAT}, // Is this always a Number? Maybe a String? WAT does it even 
                     // represent?
//entry_time: {type:Date, required:true},
//status: {type:WAT} // Is this always a Number? Maybe a String? WAT
                     // The heck does '42' vs '11' mean? :(
//}


// CREATE Event Id's//
event1_id = ObjectId()
event2_id = ObjectId()
event3_id = ObjectId()


// CREATE EVENT Objects //
event1 = { _id : event1_id,  device_id : device1_id, rfid_id: rfid1_id, alias : 1, entry_time:  new Date(), status : 11 }
event2 = { _id : event2_id,  device_id : device2_id, rfid_id: rfid3_id, alias : 2, entry_time:  new Date(), status : 42 }

// INSERT events to db //
db.events.insert(event1)
db.events.insert(event2)


// ------------------Settings------------------------- //
//setting
//{ _id: id,
//name: name,
//value: value
//}
// Create ID //
setting1_id = event1_id = ObjectId()
// Create Object //
setting1 = { _id: setting1_id, name: "Backup Time", value: 5 }
// Insert Object //
db.settings.insert(setting1)

// ------------------Admin------------------------- //
//admin
//{ _id: id,
//name: name,
//username: username,
//password: password,
//canManageUsers : bool, 
//canManageDevices : bool, 
//canManageZones : bool, 
//canGenerateReports : bool, 
//canManageBackups : bool, 
//canManageSettings : bool 
//}

admin1_id = ObjectId()
admin2_id = ObjectId()

superAdmin = { _id: admin1_id, name : "Default SuperAdmin", username: "admin", password: "P@ssw0rd", canManageUsers : true, canManageDevices : true, canManageZones : true, canGenerateReports : true, canManageBackups : true, canManageSettings : true }
db.admins.insert(superAdmin);

secondAdmin = { _id: admin2_id, name : "Anatolijs Spektors", username: "aspektor", password: "P@ssw0rd", canManageUsers : true, canManageDevices : true, canManageZones : false, canGenerateReports : true, canManageBackups : false, canManageSettings : false }
db.admins.insert(secondAdmin);




//-------DISPLAY ALL--------//

db.rfids.find().pretty();
db.zones.find().pretty();
db.cardHolders.find().pretty();
db.devices.find().pretty();
db.events.find().pretty();
db.settings.find().pretty();
db.admins.find().pretty();